"use strict";(self.webpackChunkstablecraft_io=self.webpackChunkstablecraft_io||[]).push([[569],{7864:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"code-examples/web3js-send-USDC","title":"Web3.js Send USDC","description":"The coding example below shows how to send USDC using web3.js and an Ethereum-compatible network (such as Ethereum Mainnet, Polygon, or Arbitrum). It assumes the sender is using a browser wallet like MetaMask and already holds a balance of USDC.","source":"@site/docs/code-examples/web3js-send-USDC.mdx","sourceDirName":"code-examples","slug":"/code-examples/web3js-send-USDC","permalink":"/kb/code-examples/web3js-send-USDC","draft":false,"unlisted":false,"editUrl":"https://github.com/johnpottergr/stablecraft.io/edit/main/docs/code-examples/web3js-send-USDC.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"web3js-send-USDC","title":"Web3.js Send USDC","sidebar_position":1},"sidebar":"kbSidebar","previous":{"title":"Peg Adjustment Logic","permalink":"/kb/stablecoin-mechanics/peg-adjustment-logic"},"next":{"title":"Hedera Payment Demo","permalink":"/kb/code-examples/hedera-payment-demo"}}');var o=s(4848),a=s(8453);const r={id:"web3js-send-USDC",title:"Web3.js Send USDC",sidebar_position:1},i=void 0,l={},c=[{value:"Before you start",id:"before-you-start",level:3},{value:"Install Web3.js",id:"install-web3js",level:3},{value:"Code example",id:"code-example",level:3},{value:"Notes",id:"notes",level:3},{value:"Next steps",id:"next-steps",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The coding example below shows how to send ",(0,o.jsx)(n.strong,{children:"USDC"})," using ",(0,o.jsx)(n.code,{children:"web3.js"})," and an Ethereum-compatible network (such as Ethereum Mainnet, Polygon, or Arbitrum). It assumes the sender is using a browser wallet like MetaMask and already holds a balance of USDC."]}),"\n",(0,o.jsx)(n.h3,{id:"before-you-start",children:"Before you start"}),"\n",(0,o.jsx)(n.p,{children:"To run this example, you\u2019ll need:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A USDC contract address on the chain you\u2019re using"}),"\n",(0,o.jsx)(n.li,{children:"The user\u2019s wallet connected (e.g. via MetaMask)"}),"\n",(0,o.jsx)(n.li,{children:"The ABI for a standard ERC-20 token"}),"\n",(0,o.jsx)(n.li,{children:"Web3.js installed in your project"}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," USDC is an ERC-20 token.\nThis code works for any stablecoin following that\nstandard (e.g. USDT, DAI, etc.)."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"install-web3js",children:"Install Web3.js"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install web3\n"})}),"\n",(0,o.jsx)(n.h3,{id:"code-example",children:"Code example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"import Web3 from 'web3';\n\n// Injected provider from MetaMask\nconst web3 = new Web3(window.ethereum);\n\n// Replace with USDC contract address on your network\nconst usdcAddress = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'; // Ethereum Mainnet\n\n// Standard ERC-20 ABI (simplified to just transfer)\nconst erc20ABI = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_to', type: 'address' },\n      { name: '_value', type: 'uint256' }\n    ],\n    name: 'transfer',\n    outputs: [{ name: '', type: 'bool' }],\n    type: 'function'\n  }\n];\n\nconst usdc = new web3.eth.Contract(erc20ABI, usdcAddress);\n\n// Amount of USDC to send (6 decimals)\nconst amount = web3.utils.toBN(10 * 10 ** 6); // 10 USDC\n\n// Replace with recipient address\nconst recipient = '0x123...abc';\n\n// Send transaction\nasync function sendUSDC() {\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  const sender = accounts[0];\n\n  try {\n    const tx = await usdc.methods.transfer(recipient, amount).send({ from: sender });\n    console.log('Transfer successful:', tx.transactionHash);\n  } catch (error) {\n    console.error('Transfer failed:', error);\n  }\n}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"USDC uses 6 decimals, not 18 like most tokens. Always scale correctly when setting amount."}),"\n",(0,o.jsx)(n.li,{children:"This example works with any EVM-compatible network, as long as the USDC contract address matches that network\n(e.g. Polygon USDC address)."}),"\n",(0,o.jsx)(n.li,{children:"The transfer method does not include gas estimation or fee customization\u2014add that as needed for production environments."}),"\n",(0,o.jsx)(n.li,{children:"If you're building a backend service or working without MetaMask, you\u2019ll need a provider with private key signing\n(e.g. via Alchemy or Infura)."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"next-steps",children:"Next steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Metamask Integration \u2013 How to connect and sign transactions from a frontend"}),"\n",(0,o.jsx)(n.li,{children:"Sample API Requests \u2013 Backend examples for token transfers and balance checks"}),"\n",(0,o.jsx)(n.li,{children:"Handling Business Funds \u2013 Organize wallets and manage token flows across your app or platform"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var t=s(6540);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);