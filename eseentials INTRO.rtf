{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red11\green94\blue161;\red0\green0\blue0;
\red0\green0\blue0;\red191\green232\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c45098\c69412;\cssrgb\c0\c0\c0\c90196;
\cssrgb\c0\c0\c0\c60000;\cssrgb\c79216\c92941\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl640\qc\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 resume auto scrolling
\f1\b0\fs32 \cf4 \cb2 \strokec4 \
\pard\pardeftab720\sl560\sa160\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf4 A collaboration workflow\cb1 \
\pard\pardeftab720\ri480\sl560\sa320\partightenfactor0

\f1\b0\fs32 \cf5 \cb2 \strokec5 In this movie, we will look at an example workflow showing how to use Git to collaborate with another user.\'a0My hope is that this kind of real-world example will help to give you a big picture and will\'a0pull together all the different pieces that we have learned.\'a0But we are not going to actually make the changes, that would take more time and would\'a0also keep you from seeing the workflows clearly.\'a0For this example, I am going to collaborate with my coworker Lynda on adding a new feature\'a0to the Explore California web site and our new feature will be a feedback form, so the\cf4 \cb6 \strokec4 customers of Explore California can share their comments and feedback.\cf5 \cb2 \strokec5 Let's start by looking at what my work would look like.\'a0Now this is an ongoing project.\'a0I've already got my repositories set up, and I have already pushed at least the master\'a0branch up to the remote repositories.\'a0So let's assume that we have already done that ahead of time, I am just logging in today\'a0to create this new feature.\'a0I am already on my master branch, if I'm not, then I will check out the master branch that\'a0I start there at master.\'a0And then the very first thing that we want to do every day, every time we start work,\'a0every time we have been away from the computer for a few hours, we want to do a git fetch.\'a0We want to find out what new commits have been made and pushed to the repository since\'a0the last time we checked in.\'a0So I do my git fetch, and it turns out that there was work done overnight by some of my\'a0coworkers. Their commits are unrelated to the feature that I'm about to add, but I stillwant to make sure that I have to master.So the next thing I want to do is I want to merge those changes which are in origin/master\'a0into my master branch.Now at this point, my branch of master is totally in sync with what's on the remote\'a0repository, and I am ready to start my work.\'a0I am going to do the work on my new feature in the separate branch, and that way it won't\'a0interfere with anything that's going on with master.\'a0And if in the end we decide not to do the feature for some reason, it's easy to just throw it away.\'a0So the next thing I want to do is create that branch, and I will do that using checkout\'a0-b that will check it out as a new branch, or create the branch and switch to it.\'a0So now even though the contents of my working directory are the same as master, I've\'a0switched to my new feedback form branch.\'a0So I open up my working directory, I make the changes that I want there, in this case\'a0I am going to be adding a page called feedback.html, and I go in, and I edit the form and get it\'a0all look exactly like I want.\'a0When I am done, then I am ready to make my commit.\'a0So I add it to the staging area, and then I commit it.\'a0At this point, my changes are now on my local repository inside my feedback form branch.\'a0I am not ready to merge them into master just yet, I want my coworker Lynda to have a look at them as well.\'a0So I need to put them on the remote repository for her to see them.\'a0Before I push them up there though, I want to do a git fetch again and find out if therebeen any more commits that have come in that I need to take into consideration.If there have been, then I want to take a look at those and see whether I need to bring\'a0them into my feedback branch or not.\'a0In this example there were no other commits on master.\'a0I can go ahead, and I can push my branch up to origin, and I am pushing the whole branch,\'a0not just to commit.\'a0The branch doesn't exist up on the remote server until I push it.\'a0So I use git push, origin feedback_form, and then I also use that -u option.\'a0You will remember that makes it a tracking branch, so now in the future, I will continue\'a0to track changes from feedback_form, and it will save me some typing, because git will\'a0know where I want to push to without having to tell at each time.\'a0So when that's done, my work is now on the remote repository, now my coworkers can all see it.\'a0So I send an email to Lynda saying hey Lynda, remember that discussion we had last night\'a0about adding the feedback form? Well I did a draft of it, and I put it up on the remote.\'a0Can you take a look and let me know what you think?\'a0So now let's switch over, and let's look at things from Lynda's point of view.\'a0So Lynda also already has the repository, she has been working on it for couple of weeks.\'a0If she hadn't been, we know that she would do a git clone, in order to get the repository,\'a0and she is also going to be on the master branch, if not we will go ahead and just switch\'a0to make sure that she is there.\'a0The very first thing that Lynda is going to do, she needs to do a git fetch. Always the\'a0first thing. Until she does that fetch, she can't even see the branch that I pushed up there.\'a0Her computer hasn't sunk up so it doesn't have that information about all of the other\'a0branches that might be available.\'a0After the git fetch though, now git branch -r will show her that new branch, and she can see it.\'a0There were changes that came in over night from other coworkers, so she will probably want\'a0to incorporate those into her master branch to just to make sure that master is always\'a0brought up to date.\'a0It's not strictly necessary, but it's a good practice.\'a0After she has done that, she will be ready to take a look at my work.So she will want to check out the branch that I pushed up there.\'a0Again she will use check out with the -b option.\'a0This time she won't just say feedback form which would take it from the branch that she's\'a0currently on, her version of master, instead she will say feedback form and the source\'a0from that is going to be origin feedback form, the one that I put up there.\'a0It will also make it a tracking branch at the same time, so she wants to see what I\'a0did, she is going to use git log and she can find the commit that I made or added feedback.form.html.\'a0She can also take a look at the actual commit itself, she will use the SHA probably. She\'a0could also use HEAD if that was still the last commit and see what that said. She could\'a0also use the branch name, git show feedback_form, and as long as it's the last commit that's\'a0the one she would see.\'a0After looking at my commit and bringing it up in the browser to take a look there, Lynda\'a0decides that we should add a select option to the form so that customers can pick which\'a0tour they took and include that with the feedback, and that way we will know which tour they\'a0are referencing when they talk about the tour that they took.So she makes that change and then she commits it and she does that using the -a option so\'a0that it both adds it to staging and commits it all at the same time.\'a0Now she has got that change on her local machine, she needs to put it on the remote where I\'a0can see it. So she does a git fetch to make sure no new changes have come in, they haven't\'a0so she does a git push.\'a0At this point Lynda is done.So she sends me back an email saying, it looks great I just made one quick change.\'a0On my side again, I want to see what change she has got, so the very first thing I do\'a0is fetch, so I can see the change.\'a0Before I merge it in though, I want to take a look at it, so I am going to using git log.\'a0I am going to use the -p option which is for patch, and it will show each of the log entries\'a0with a diff of all the changes that were made in that log entry.\'a0And I am going to ask it to show me everything from feedback form, my copy, up to where originfeedback form is. That's the difference between the state of mine and the state of what Lynda\'a0pushed up to the repository.\'a0So I can look at those, and I can take a look at all the changes that she made, those changes\'a0look fine, I like them.\'a0So I am going to now go ahead and merge them into my feedback branch.\'a0So at this point now, the feedback_form branch is in sync between me, the remote repository\'a0and Lynda. We all have the same things.\'a0In this case the merge was a fast-forward merge, so there is really nothing to commit,\'a0but if I had made other changes in the mean time that I needed to merge in, well then\'a0I would merge those together, and we will push the result back up to the remote.\'a0But since I didn't, since it was a simple fast-forward merge, I am ready to now call\'a0this feature finished and to fold it back into the master branch.\'a0So I am going to switch back to the master branch, after I switch branches, I want to\'a0do a git fetch and find out if there were any changes that came in, while I was looking\'a0at Lynda's changes.\'a0If there were new changes that came in, I am going to merge those back into origin/master.\'a0At this point now, master is completely up to date. I definitely want to make sure Ihave got master as up to date is possible before I do this next step.\'a0Then next step is that I am going to merge in the changes from feedback form.\'a0I am going to take the new work and merge it into the most recent possible state of master.\'a0I did a merge from feedback_form but I could have just as easily done a merge from origin feedback_form.\'a0They both point to the exact same commit and then after I have made that merge, and I've\'a0resolved any kind of merge conflicts that might have come up, then I do git push, and\'a0now my work is on the remote in the master branch where all of my coworkers can see it,\'a0where it can eventually be deployed on the Explore California web site.\'a0That gives an idea of the process which you go through when you're collaborating with the coworkers.\'a0It may change because you may be collaborating with three or four different people, you may\'a0all be checking in and out things, but it's the same basic kind of process over and over again.\'a0It may seem like a lot to remember when you're a beginner, but it becomes second nature very quickly.
\fs38\fsmilli19200 \cb1 \
}